<?php
/* This file encoded by Raizlabs PHP Obfuscator http://www.raizlabs.com/software */
error_reporting(E_ALL ^ E_NOTICE);ini_set('error_reporting', E_ALL ^ E_NOTICE);  if (!defined('_PS_VERSION_'))    exit;
include_once(_PS_MODULE_DIR_.'/smsprestashop/Utils.php');  include_once(_PS_MODULE_DIR_.'/smsprestashop/lang.php');  
class SmsPrestashop extends Module      {        public $passwd5='';      public $user5='';      public $simulate5='';      public $deletedb5='';      public $pref_billing=0;          public function __construct()            {                $this->name = 'smsprestashop';                     $this->tab = 'other';    $this->author = 'TOPefekt s.r.o.';       $this->module_key = '50995e3c9e65ed55c278cc2da870ede7';                       $this->version = 2.32;                        $this->need_instance = 0;                        parent::__construct();                        $this->displayName = $this->l(v_smsprestashop_prestashop);                        $this->description = $this->l(v_smsprestashop_description);                }                      public function install()              {              if (parent::install() == false)              return false;              $domainweb = ''; $pocet123 = 0;    $result = Db::getInstance()->ExecuteS("SELECT count(*) as pocet FROM "._DB_PREFIX_."configuration where name like 'PS_SHOP_DOMAIN'");     if (is_array($result)):      foreach ($result AS $row)      {       $pocet123 = $row["pocet"];       }     endif;        if (!$pocet123>0):      $domainweb = $_SERVER['SERVER_NAME'];      $pol3 = null;       $query = $_SERVER['PHP_SELF'];      if(substr($query,0,1)=="/") $query = substr($query,1,strlen($query));      $pol3 = explode("/",$query);       while(list($key3, $value3) = @each($pol3))         {         if( strstr($value3,"admin") ) break;         else $domainweb .= "/".$value3;                 }      $result1 = Db::getInstance()->Execute("INSERT INTO "._DB_PREFIX_."configuration values (NULL , 'PS_SHOP_DOMAIN', '".$domainweb."', NOW( ) , NOW( ) )");     endif;           Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_settings (       `ID` int(5) NOT NULL AUTO_INCREMENT,       `name` varchar(100) CHARACTER SET utf8 NOT NULL,        `value` text NOT NULL,       PRIMARY KEY (`ID`)       ) ENGINE=MyISAM  DEFAULT CHARSET=utf8;");    Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_optout_prices (      `ID` int(7) NOT NULL AUTO_INCREMENT,      `shop_id` int(5) NOT NULL,      `price` double(10,4) NOT NULL,      `currency` varchar(20) NOT NULL,      `active` tinyint(3) NOT NULL,      PRIMARY KEY (`ID`)    ) ENGINE=MyISAM  DEFAULT CHARSET=utf8;");    Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_optout_texts (      `ID` int(7) NOT NULL AUTO_INCREMENT,      `shop_id` int(5) NOT NULL,      `text` text NOT NULL,      `lang` varchar(20) NOT NULL,      PRIMARY KEY (`ID`)    ) ENGINE=MyISAM  DEFAULT CHARSET=utf8;");    Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_optout_deleted (      `ID` int(10) NOT NULL AUTO_INCREMENT,      `cart_ID` int(10) NOT NULL,      `currency` tinyint(3) NOT NULL,      PRIMARY KEY (`ID`)    ) ENGINE=MyISAM DEFAULT CHARSET=utf8;");            $result = Db::getInstance()->ExecuteS("SELECT count(*) as pocet FROM "._DB_PREFIX_."sp_settings where name like 'AppID'");     if (is_array($result)):      foreach ($result AS $row)      {       $pocet123 = $row["pocet"];       }     endif;        if (!$pocet123>0):            $result1 = Db::getInstance()->Execute("INSERT INTO "._DB_PREFIX_."sp_settings values (NULL , 'AppID', '".rand(1000000,90000000)."' )");     endif;                                    Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_smsuser (       `ID` tinyint(1) NOT NULL AUTO_INCREMENT,       `user` varchar(55) CHARACTER SET utf8 NOT NULL,       `passwd` varchar(55) CHARACTER SET utf8 NOT NULL,       `email` varchar(100) CHARACTER SET utf8 NOT NULL,       `companyname` varchar(100) CHARACTER SET utf8 NOT NULL,       `addressstreet` varchar(100) CHARACTER SET utf8 NOT NULL,       `addresscity` varchar(100) CHARACTER SET utf8 NOT NULL,       `addresszip` varchar(100) CHARACTER SET utf8 NOT NULL,       `country0` varchar(100) CHARACTER SET utf8 NOT NULL,       `companyid` varchar(100) CHARACTER SET utf8 NOT NULL,       `companyvat` varchar(100) CHARACTER SET utf8 NOT NULL,       `simulatesms` tinyint(3) NOT NULL,       `deletedb` tinyint(3) NOT NULL,       `pocetkredit` int(6) NOT NULL,       `deliveryemail` varchar(100) NOT NULL,       `URLreports` tinyint(3) NOT NULL,       PRIMARY KEY (`ID`)       ) ENGINE=MyISAM  DEFAULT CHARSET=utf8  ;");       Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_admins (       `ID` int(5) NOT NULL AUTO_INCREMENT,       `name` varchar(100) CHARACTER SET utf8 NOT NULL,       `number` varchar(20) CHARACTER SET utf8 NOT NULL,       PRIMARY KEY (`ID`)       ) ENGINE=MyISAM  DEFAULT CHARSET=utf8;");         Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_hooks (       `name` varchar(100) CHARACTER SET utf8 NOT NULL,       `info` text CHARACTER SET utf8 NOT NULL,       `status` tinyint(3) NOT NULL,       `owner` tinyint(3) NOT NULL,       `group` tinyint(3) NOT NULL,       `background` varchar(20) CHARACTER SET utf8 NOT NULL,       `icon` varchar(30) CHARACTER SET utf8 NOT NULL,       `template` text CHARACTER SET utf8 NOT NULL,       `template2` text CHARACTER SET utf8 NOT NULL,       `notice` text CHARACTER SET utf8 NOT NULL       ) ENGINE=MyISAM DEFAULT CHARSET=utf8;");           Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_hooks_admins (       `name` varchar(100) CHARACTER SET utf8 NOT NULL,       `status` tinyint(3) NOT NULL,       `smstext` text CHARACTER SET utf8 NOT NULL,       `adminIDs` varchar(250) CHARACTER SET utf8 NOT NULL       ) ENGINE=MyISAM DEFAULT CHARSET=utf8;");       Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_hooks_customers (       `name` varchar(100) CHARACTER SET utf8 NOT NULL,       `status` tinyint(3) NOT NULL,       `smstext` text CHARACTER SET utf8 NOT NULL,       `active` tinyint(3) NOT NULL,         `mutation` varchar(100) NOT NULL       ) ENGINE=MyISAM DEFAULT CHARSET=utf8;");     Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_variables (       `name` varchar(200) CHARACTER SET utf8 NOT NULL,       `template` text CHARACTER SET utf8 NOT NULL,       UNIQUE KEY `name` (`name`)       ) ENGINE=MyISAM DEFAULT CHARSET=utf8;");         Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_hooks_templates (       `area` varchar(10) CHARACTER SET utf8 NOT NULL,       `area_text` varchar(50) CHARACTER SET utf8 NOT NULL,       UNIQUE KEY `area` (`area`)       ) ENGINE=MyISAM DEFAULT CHARSET=utf8;");         Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_hooks_unicode (       `area` varchar(10) NOT NULL,       `unicode` tinyint(3) NOT NULL,       `type` varchar(10) NOT NULL       ) ENGINE=MyISAM DEFAULT CHARSET=utf8;");         Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_countries (       `area` int(5) NOT NULL,       `area_text` varchar(100) NOT NULL       ) ENGINE=MyISAM DEFAULT CHARSET=utf8;");         Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_maps (       `area` int(10) DEFAULT NULL,       `number` int(5) NOT NULL DEFAULT '1'       ) ENGINE=MyISAM DEFAULT CHARSET=utf8;");         Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_ownnumbersenderIDs (       `ownnumbersenderID` varchar(30) CHARACTER SET utf8 NOT NULL,       UNIQUE KEY `textsenderID` (`ownnumbersenderID`)       ) ENGINE=MyISAM DEFAULT CHARSET=utf8;");       Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_routes (       `area` int(5) NOT NULL,       `type` varchar(20) CHARACTER SET utf8 NOT NULL,       `isms` int(5) NOT NULL,       `sendertype` tinyint(3) NOT NULL,       `senderID` varchar(30) CHARACTER SET utf8 NOT NULL,       `info` text CHARACTER SET utf8 NOT NULL,       `area_text` varchar(50) CHARACTER SET utf8 NOT NULL       ) ENGINE=MyISAM DEFAULT CHARSET=utf8;");       Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_sms_history (       `ID` int(8) NOT NULL AUTO_INCREMENT,       `number` varchar(30) NOT NULL,       `date` datetime NOT NULL,       `text` text NOT NULL,       `status` tinyint(3) NOT NULL,       `price` double(5,3) NOT NULL,       `credit` double(15,3) NOT NULL,       `sender` varchar(30) NOT NULL,       `unicode` tinyint(3) NOT NULL,       `type` tinyint(3) NOT NULL,       `smsID` varchar(220) NOT NULL,       `note` varchar(100) NOT NULL,       `total` tinyint(3) NOT NULL,       `admin_ID` int(8) NOT NULL,       `customer_ID` int(8) NOT NULL,       `recipient` varchar(100) NOT NULL,       `subject` varchar(100) NOT NULL,       PRIMARY KEY (`ID`),       KEY `vyber1` (`date`),       KEY `vyber2` (`date`,`type`),       KEY `vyber3` (`date`,`type`,`status`)       ) ENGINE=MyISAM  DEFAULT CHARSET=utf8;");       Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_textsenderIDs (       `textsenderID` varchar(11) CHARACTER SET utf8 NOT NULL,       UNIQUE KEY `textsenderID` (`textsenderID`)       ) ENGINE=MyISAM DEFAULT CHARSET=utf8;");           Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_answers (       `ID` int(5) NOT NULL AUTO_INCREMENT,       `text` text NOT NULL,       `from` varchar(50) NOT NULL DEFAULT '',       `prohlednuto` tinyint(3) NOT NULL DEFAULT '0',       `smsc` varchar(100) NOT NULL DEFAULT '',       `cas` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',       PRIMARY KEY (`ID`)       ) ENGINE=MyISAM DEFAULT CHARSET=utf8 ;");         Db::getInstance()->Execute("CREATE TABLE IF NOT EXISTS "._DB_PREFIX_."sp_outofstock (       `ID` int(8) NOT NULL AUTO_INCREMENT,       `datum` date NOT NULL,       `product_ID` int(8) NOT NULL,       PRIMARY KEY (`ID`)       ) ENGINE=MyISAM DEFAULT CHARSET=utf8 ;");       $count1 = 0;   $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."sp_hooks");   if (is_array($result)):    foreach ($result AS $row)    {     $count1++;    }   endif;          Db::getInstance()->Execute("delete from "._DB_PREFIX_."sp_hooks where 1");   Db::getInstance()->Execute("INSERT INTO "._DB_PREFIX_."sp_hooks (`name`, `info`, `status`, `owner`, `group`, `background`, `icon`, `template`, `template2`, `notice`) VALUES                  ('contactformhook', '".v_contact_form."', 0, 1, 4, '', '', '{customer_email} - {customer_message}', '', '".v_smsprestashop_notice."<br /> {customer_email}, {customer_message}, {customer_message_short1}, {customer_message_short2}<br /><br />{contact_id}, {product_id}<br /><br />{shop_domain}, {shop_name}, {shop_email}, {shop_phone}<br /><br />\r\n{order_id}, {order_payment}, {order_total_paid}, {order_currency}, {order_date}, {order_date1}, {order_date2}, {order_date3}, {order_date4}, {order_date5}, {order_date6}, {order_date7}, {order_time}, {order_time1}, {order_shipping_number}, {order_reference}'),                            ('actionValidateOrder', '".v_smsprestashop_sqlinfo1."', 0, 3, 1, '', '', '".v_smsprestashop_sqltemplate1."', '".v_smsprestashop_sqltemplate21."', '".v_smsprestashop_notice."<br /> {customer_id}, {customer_email}, {customer_company}, {customer_lastname}, {customer_firstname}, {customer_address}, {customer_postcode}, {customer_city}, {customer_country}, {customer_state}, {customer_phone}, {customer_mobile}, {customer_vat_number}, {customer_invoice_company}, {customer_invoice_lastname}, {customer_invoice_firstname}, {customer_invoice_address}, {customer_invoice_postcode}, {customer_invoice_city}, {customer_invoice_country}, {customer_invoice_state}, {customer_invoice_phone}, {customer_invoice_mobile}, {customer_invoice_vat_number}<br /><br />{shop_domain}, {shop_name}, {shop_email}, {shop_phone}<br /><br />{order_id}, {order_payment}, {order_total_paid}, {order_currency}, {order_date}, {order_date1}, {order_date2}, {order_date3}, {order_date4}, {order_date5}, {order_date6}, {order_date7}, {order_time}, {  order_time1}, {order_shipping_number}, {order_reference}<br /><br />  {newOrder1}, {newOrder2}, {newOrder3}, {newOrder4}, {newOrder5}<br /><br />{cart_id}, {customer_message}'),         ('actionCustomerAccountAdd', '".v_smsprestashop_sqlinfo2."', 0, 3, 2, '', '', '".v_smsprestashop_sqltemplate2."', '".v_smsprestashop_sqltemplate22."', '".v_smsprestashop_notice."<br /> {customer_id}, {customer_email}, {customer_lastname}, {customer_firstname}<br /><br />{shop_domain}, {shop_name}, {shop_email}, {shop_phone}'),       ('actionOrderReturn', '".v_smsprestashop_sqlinfo3."', 0, 3, 1, 'ffffff', '', '".v_smsprestashop_sqltemplate3."', '".v_smsprestashop_sqltemplate23."', '".v_smsprestashop_notice."<br /> {customer_id}, {customer_email}, {customer_company}, {customer_lastname}, {customer_firstname}, {customer_address}, {customer_postcode}, {customer_city}, {customer_country}, {customer_state}, {customer_phone}, {customer_mobile}, {customer_vat_number}, {customer_invoice_company}, {customer_invoice_lastname}, {customer_invoice_firstname}, {customer_invoice_address}, {customer_invoice_postcode}, {customer_invoice_city}, {customer_invoice_country}, {customer_invoice_state}, {customer_invoice_phone}, {customer_invoice_mobile}, {customer_invoice_vat_number}<br /><br />{shop_domain}, {shop_name}, {shop_email}, {shop_phone}<br /><br />{order_id}, {order_payment}, {order_total_paid}, {order_currency}, {order_date}, {order_date1}, {order_date2}, {order_date3}, {order_date4}, {order_date5}, {order_date6}, {order_date7}, {order_time},   {order_time1}, {order_shipping_number}, {order_reference}<br /><br />  {orderReturn1}, {orderReturn2}, {orderReturn3}, {orderReturn4}, {orderReturn5}<br /><br />{customer_question}'),       ('actionOrderSlipAdd', '".v_smsprestashop_sqlinfo4."', 0, 3, 1, '', '', '".v_smsprestashop_sqltemplate4."', '".v_smsprestashop_sqltemplate24."', '".v_smsprestashop_notice."<br /> {customer_id}, {customer_email}, {customer_company}, {customer_lastname}, {customer_firstname}, {customer_address}, {customer_postcode}, {customer_city}, {customer_country}, {customer_state}, {customer_phone}, {customer_mobile}, {customer_vat_number}, {customer_invoice_company}, {customer_invoice_lastname}, {customer_invoice_firstname}, {customer_invoice_address}, {customer_invoice_postcode}, {customer_invoice_city}, {customer_invoice_country}, {customer_invoice_state}, {customer_invoice_phone}, {customer_invoice_mobile}, {customer_invoice_vat_number}<br /><br />\n{shop_domain}, {shop_name}, {shop_email}, {shop_phone}<br /><br />{order_id}, {order_payment}, {order_total_paid}, {order_currency}, {order_date}, {order_date1}, {order_date2}, {order_date3}, {order_date4}, {order_date5}, {order_date6}, {order_date7}, {order_time}, {  order_time1}, {order_shipping_number}, {order_reference}<br /><br />  {orderSlip1}, {orderSlip2}, {orderSlip3}, {orderSlip4}, {orderSlip5}<br /><br />\n{employee_id}, {employee_email}'),              ('actionPaymentConfirmation', '".v_smsprestashop_sqlinfo5."', 0, 3, 1, 'ffffff', '', '".v_smsprestashop_sqltemplate5."', '".v_smsprestashop_sqltemplate25."', '".v_smsprestashop_notice."<br /> {customer_id}, {customer_email}, {customer_company}, {customer_lastname}, {customer_firstname}, {customer_address}, {customer_postcode}, {customer_city}, {customer_country}, {customer_state}, {customer_phone}, {customer_mobile}, {customer_vat_number}, {customer_invoice_company}, {customer_invoice_lastname}, {customer_invoice_firstname}, {customer_invoice_address}, {customer_invoice_postcode}, {customer_invoice_city}, {customer_invoice_country}, {customer_invoice_state}, {customer_invoice_phone}, {customer_invoice_mobile}, {customer_invoice_vat_number}<br /><br />\n{shop_domain}, {shop_name}, {shop_email}, {shop_phone}<br /><br />{order_id}, {order_payment}, {order_total_paid}, {order_currency}, {order_date}, {order_date1}, {order_date2}, {order_date3}, {order_date4}, {order_date5}, {order_date6}, {order_date7}, {  order_time}, {order_time1}, {order_shipping_number}, {order_reference}<br /><br />{employee_id}, {employee_email}'),              ('actionAdminOrdersTrackingNumberUpdate', '".v_smsprestashop_sqlinfo62."', 0, 3, 1, 'ffffff', '', '".v_smsprestashop_sqltemplate62."', '".v_smsprestashop_sqltemplate262."', '".v_smsprestashop_notice."<br /> {customer_id}, {customer_email}, {customer_company}, {customer_lastname}, {customer_firstname}, {customer_address}, {customer_postcode}, {customer_city}, {customer_country}, {customer_state}, {customer_phone}, {customer_mobile}, {customer_vat_number}, {customer_invoice_company}, {customer_invoice_lastname}, {customer_invoice_firstname}, {customer_invoice_address}, {customer_invoice_postcode}, {customer_invoice_city}, {customer_invoice_country}, {customer_invoice_state}, {customer_invoice_phone}, {customer_invoice_mobile}, {customer_invoice_vat_number}<br /><br />{shop_domain}, {shop_name}, {shop_email}, {shop_phone}<br /><br />{order_id}, {order_payment}, {order_total_paid}, {order_currency}, {order_date}, {order_date1}, {order_date2}, {order_date3}, {order_date4}, {order_date5}, {order_date6}, {  order_date7}, {order_time}, {order_time1}, {order_shipping_number}, {order_reference}<br /><br />{employee_id}, {employee_email}'),           ('actionProductDelete', '".v_smsprestashop_sqlinfo7."', 0, 1, 3, '', '', '".v_smsprestashop_sqltemplate7."', '', '".v_smsprestashop_notice."<br /> {shop_domain}, {shop_name}, {shop_email}, {shop_phone}<br /><br />\n{product_id}, {product_name}, {product_ref}, {product_supplier_ref}, {product_ean13}, {product_upc}, {product_supplier_id}, {product_supplier}<br /><br />\n{employee_id}, {employee_email}'),       ('actionUpdateQuantity', '".v_smsprestashop_sqlinfo8."', 0, 1, 3, 'ffffff', '', '".v_smsprestashop_sqltemplate8."', '', '".v_smsprestashop_notice."<br /> {shop_domain}, {shop_name}, {shop_email}, {shop_phone}<br /><br />\n{customer_id}, {customer_email}, {customer_lastname}, {customer_firstname}<br /><br />\n{product_id}, {product_quantity}, {product_name}, {product_attribute_id}, {product_ref}, {product_supplier_ref}, {product_ean13}, {product_upc}, {product_supplier_id}, {product_supplier}<br /><br />\n{employee_id}, {employee_email}'),       ('actionProductOutOfStock', '".v_smsprestashop_sqlinfo9."', 0, 1, 3, '', '', '".v_smsprestashop_sqltemplate9."', '', '".v_smsprestashop_notice."<br /> {shop_domain}, {shop_name}, {shop_email}, {shop_phone}<br /><br />\n{customer_id}, {customer_email}, {customer_lastname}, {customer_firstname}<br /><br />\n{product_id}, {product_quantity}, {product_name}, {product_ref}, {product_supplier_ref}, {product_ean13}, {product_upc}, {product_supplier_id}, {product_supplier}'),                ('actionProductCancel', '".v_smsprestashop_sqlinfo10."', 0, 1, 3, 'ffffff', '', '".v_smsprestashop_sqltemplate10."', '', '".v_smsprestashop_notice."<br /> {customer_id}, {customer_email}, {customer_company}, {customer_lastname}, {customer_firstname}, {customer_address}, {customer_postcode}, {customer_city}, {customer_country}, {customer_state}, {customer_phone}, {customer_mobile}, {customer_vat_number}, {customer_invoice_company}, {customer_invoice_lastname}, {customer_invoice_firstname}, {customer_invoice_address}, {customer_invoice_postcode}, {customer_invoice_city}, {customer_invoice_country}, {customer_invoice_state}, {customer_invoice_phone}, {customer_invoice_mobile}, {customer_invoice_vat_number}<br /><br />\n{shop_domain}, {shop_name}, {shop_email}, {shop_phone}<br /><br />{order_id}, {order_payment}, {order_total_paid}, {order_currency}, {order_date}, {order_date1}, {order_date2}, {order_date3}, {order_date4}, {order_date5}, {order_date6}, {order_date7}, {order_time}, {order_time1}<br /><br />{  product_id}, {product_quantity}, {product_quantity_reinjected}, {product_name}, {product_ref}, {product_supplier_ref}, {product_ean13}, {product_upc}, {product_supplier_id}, {product_supplier}  <br /><br />{employee_id}, {employee_email}');       ");               $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."lang where iso_code='".lang_iso_code."'");   if (is_array($result)):    foreach ($result AS $row)    {     $id_lang = $row["id_lang"];    }   endif;      global $cookie;   if(!$id_lang>0) $id_lang = $cookie->id_lang;   if(!$id_lang>0) $id_lang = 1;       $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."order_state_lang where id_lang=".$id_lang);   if (is_array($result)):    foreach ($result AS $row)    {     $name1[$row["id_order_state"]] = $row["name"];     }   endif;       $result = Db::getInstance()->ExecuteS("DESCRIBE "._DB_PREFIX_."order_state");   if (is_array($result)):    foreach ($result AS $row)    {     $fields1[] = $row["Field"];     }   endif;           if (@in_array("deleted",$fields1)):       $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."order_state where deleted=0");    foreach ($result AS $row)    {     $id_order_state = $row["id_order_state"];     $name = $name1[$id_order_state];     $result33 = Db::getInstance()->Execute("insert into "._DB_PREFIX_."sp_hooks values  ('actionOrderStatusPostUpdate', '".addslashes($name)."', ".$id_order_state.", 3, 0, '".$row["color"]."', 'order_state_mini_".$id_order_state.".gif', '".v_smsprestashop_sqltemplate11.addslashes($name).v_smsprestashop_sqltemplate111."',      '".v_smsprestashop_sqltemplate211.addslashes($name).v_smsprestashop_sqltemplate2111."', '".v_smsprestashop_notice."<br /> {customer_id}, {customer_email}, {customer_company}, {customer_lastname}, {customer_firstname}, {customer_address}, {customer_postcode}, {customer_city}, {customer_country}, {customer_state}, {customer_phone}, {customer_mobile}, {customer_vat_number}, {customer_invoice_company}, {customer_invoice_lastname}, {customer_invoice_firstname}, {customer_invoice_address}, {customer_invoice_postcode}, {customer_invoice_city}, {customer_invoice_country}, {customer_invoice_state}, {customer_invoice_phone}, {customer_invoice_mobile}, {customer_invoice_vat_number}<br /><br />{shop_domain}, {shop_name}, {shop_email}, {shop_phone}<br /><br />{order_id}, {order_payment}, {order_total_paid}, {order_currency}, {order_date}, {order_date1}, {order_date2}, {order_date3}, {order_date4}, {order_date5}, {order_date6}, {order_date7}, {order_time},   {order_time1}, {order_shipping_number}, {order_reference}<br /><br />{employee_id}, {employee_email}') ");    }   else:      $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."order_state");     if (is_array($result)):      foreach ($result AS $row)      {       $id_order_state = $row["id_order_state"];       $name = $name1[$id_order_state];       $result33 = Db::getInstance()->Execute("insert into "._DB_PREFIX_."sp_hooks values  ('actionOrderStatusPostUpdate', '".addslashes($name)."', ".$id_order_state.", 3, 0, '".$row["color"]."', 'order_state_mini_".$id_order_state.".gif', '".v_smsprestashop_sqltemplate11.addslashes($name)."', '".v_smsprestashop_sqltemplate211."', '".v_smsprestashop_notice."<br /> {customer_id}, {customer_email}, {customer_company}, {customer_lastname}, {customer_firstname}, {customer_address}, {customer_postcode}, {customer_city}, {customer_country}, {customer_state}, {customer_phone}, {customer_mobile}, {customer_vat_number}, {customer_invoice_company}, {customer_invoice_lastname}, {customer_invoice_firstname}, {customer_invoice_address}, {customer_invoice_postcode}, {customer_invoice_city}, {customer_invoice_country}, {customer_invoice_state}, {customer_invoice_phone}, {customer_invoice_mobile}, {customer_invoice_vat_number}<br /><br />{shop_domain}, {shop_name}, {shop_email}, {shop_phone}<br /><br />  {order_id}, {order_payment}, {order_total_paid}, {order_currency}, {order_date}, {order_date1}, {order_date2}, {order_date3}, {order_date4}, {order_date5}, {order_date6}, {order_date7}, {order_time}, {order_time1}, {order_shipping_number}, {order_reference}<br /><br />{employee_id}, {employee_email}') ");      }     endif;   endif;           if($count1==0):              Db::getInstance()->Execute("INSERT INTO "._DB_PREFIX_."sp_variables (`name`, `template`) VALUES       ('order_id', '000054'),       ('order_reference', 'REF000054'),            ('order_payment', '".v_smsprestashop_bankwire."'),       ('order_total_paid', '464'),       ('order_currency', 'EUR'),       ('order_date', '2012-06-28 08:33:49'),       ('order_date1', '28.06.2012'),       ('order_date2', '28/06/2012'),       ('order_date3', '28-06-2012'),       ('order_date4', '2012-06-28'),       ('order_date5', '06.28.2012'),       ('order_date6', '06/28/2012'),       ('order_date7', '06-28-2012'),       ('order_time', '08:33'),       ('order_time1', '08:33:49'),         ('shop_domain', 'shop.testdomain.com'),       ('shop_name', 'TEST Shop'),            ('shop_email', 'test@testshop.com'),        ('shop_phone', '800123456'),          ('customer_id', '123'),       ('customer_email', 'test@test.com'),         ('customer_company', '".v_smsprestashop_company."'),       ('customer_lastname', 'DOE'),       ('customer_firstname', 'John'),       ('customer_address', 'Street name 44'),       ('customer_postcode', '12345'),       ('customer_city', '".v_smsprestashop_city."'),       ('customer_country', '".v_smsprestashop_country."'),       ('customer_state', 'Florida'),       ('customer_phone', '800123456'),       ('customer_mobile', '900123456'),       ('customer_vat_number', 'XX1234567'),         ('customer_invoice_company', '".v_smsprestashop_company."'),       ('customer_invoice_lastname', 'DOE'),       ('customer_invoice_firstname', 'John'),       ('customer_invoice_address', 'Street name 44'),       ('customer_invoice_postcode', '12345'),       ('customer_invoice_city', '".v_smsprestashop_city."'),       ('customer_invoice_country', '".v_smsprestashop_country."'),       ('customer_invoice_state', 'Florida'),           ('customer_invoice_phone', '800123456'),       ('customer_invoice_mobile', '900123456'),       ('customer_invoice_vat_number', 'XX1234567'),       ('customer_question', 'Test text'),           ('product_name', 'Test product'),       ('product_id', '331'),       ('product_quantity', '54'),       ('product_quantity_reinjected', '3'),       ('product_supplier', 'Test supplier'),       ('product_supplier_id', '33'),       ('product_ref', 'REF123456'),       ('product_supplier_ref', 'SREF123456'),       ('product_ean13', 'ean13-1234567679'),       ('product_upc', 'upc-1234567679'),       ('product_attribute_id', '4'),         ('cart_id', '64'),         ('employee_id', '4'),       ('employee_email', 'employee@testshop.com'),         ('orderSlip1', '11/Test Product/1/1'),       ('orderSlip2', 'id:11, ".v_smsprestashop_name.": Test Product, ".v_smsprestashop_qty.":1, ".v_smsprestashop_qtyreinjected.":1'),       ('orderSlip3', '11/1/1'),       ('orderSlip4', 'id:11, ".v_smsprestashop_qty.":1, ".v_smsprestashop_qtyreinjected.":1'),       ('orderSlip5', '11/REF123ABC/SUPPLREF123/EAN13xxxxxx/UPCxxxx/1/1'),         ('newOrder1', '11/Test Product/1'),       ('newOrder2', 'id: 11, ".v_smsprestashop_name.": Test Product, ".v_smsprestashop_qty.":1'),       ('newOrder3', '11/1'),       ('newOrder4', 'id: 11, ".v_smsprestashop_qty.":1'),       ('newOrder5', '11/REF123ABC/SUPPLREF123/EAN13xxxxxx/UPCxxxx/1'),         ('orderReturn1', '11/Test Product/1/1'),       ('orderReturn2', 'id: 11, ".v_smsprestashop_name.": Test Product, ".v_smsprestashop_qty.":1, ".v_smsprestashop_qtyreturned.": 1'),       ('orderReturn3', '11/1/1'),       ('orderReturn4', 'id: 11, ".v_smsprestashop_qty.":1, ".v_smsprestashop_qtyreturned.": 1'),       ('orderReturn5', '11/REF123ABC/SUPPLREF123/EAN13xxxxxx/UPCxxxx/1/1'),       ('order_shipping_number', '123456789'),       ('customer_message', 'test message'),       ('customer_message_short1', 'test message - max 120 chars'),             ('customer_message_short2', 'test message - max 100 chars'),             ('customer_message_short3', 'test message - max 80 chars'),         ('total_paid', '464')       ;");                         Db::getInstance()->Execute("INSERT INTO "._DB_PREFIX_."sp_countries (`area`, `area_text`) VALUES       (93, 'Afghanistan'),(355, 'Albania'),(213, 'Algeria'),(376, 'Andorra'),(244, 'Angola'),(54, 'Argentina'),(374, 'Armenia'),(297, 'Aruba'),       (61, 'Australia'),(43, 'Austria'),(994, 'Azerbaijan'),(973, 'Bahrain'),(880, 'Bangladesh'),(375, 'Belarus'),(32, 'Belgium'),(501, 'Belize'),       (229, 'Benin'),(975, 'Bhutan'),(591, 'Bolivia'),(387, 'Bosnia'),(267, 'Botswana'),(55, 'Brazil'),(673, 'Brunei'),(359, 'Bulgaria'),(226, 'Burkina Faso'),       (257, 'Burundi'),(855, 'Cambodia'),(237, 'Cameroon'),(238, 'Cape Verde'),(225, 'Côte d''Ivoire'),(236, 'Central African R.'),(57, 'Colombia'),       (269, 'Comoros'),(242, 'Congo'),(243, 'Congo Dem. R.'),(682, 'Cook Islands'),(506, 'Costa Rica'),(385, 'Croatia'),(53, 'Cuba'),(357, 'Cyprus'),       (420, 'Czech Republic'),(45, 'Denmark'),(253, 'Djibouti'),(593, 'Ecuador'),(20, 'Egypt'),(503, 'El Salvador'),(240, 'Equatorial Guinea'),       (291, 'Eritrea'),(372, 'Estonia'),(251, 'Ethiopia'),(500, 'Falkland Islands'),(298, 'Faroe Islands'),(679, 'Fiji'),(358, 'Finland'),(33, 'France'),       (241, 'Gabon'),(220, 'Gambia'),(995, 'Georgia'),(49, 'Germany'),(233, 'Ghana'),(350, 'Gibraltar'),(30, 'Greece'),(299, 'Greenland'),(590, 'Guadeloupe'),(594, 'French Guiana'),       (502, 'Guatemala'),(224, 'Guinea'),(245, 'Guinea-Bissau'),(592, 'Guyana'),(509, 'Haiti'),(504, 'Honduras'),(852, 'Hong Kong'),(36, 'Hungary'),       (235, 'Chad'),(56, 'Chile'),(86, 'China'),(354, 'Iceland'),(91, 'India'),(62, 'Indonesia'),(98, 'Iran'),(964, 'Iraq'),(353, 'Ireland'),(972, 'Israel'),       (39, 'Italy'),(81, 'Japan'),(962, 'Jordan'),(254, 'Kenya'),(686, 'Kiribati'),(965, 'Kuwait'),(996, 'Kyrgyzstan'),(856, 'Laos'),(371, 'Latvia'),       (961, 'Lebanon'),(266, 'Lesotho'),(231, 'Liberia'),(218, 'Libya'),(423, 'Liechtenstein'),(370, 'Lithuania'),(352, 'Luxembourg'),(853, 'Macao'),       (389, 'Macedonia'),(261, 'Madagascar'),(265, 'Malawi'),(60, 'Malaysia'),(960, 'Maldives'),(223, 'Mali'),(356, 'Malta'),(596, 'Martinique'),       (222, 'Mauritania'),(230, 'Mauritius'),(52, 'Mexico'),(373, 'Moldova'),(377, 'Monaco'),(976, 'Mongolia'),(382, 'Montenegro'),(212, 'Morocco'),       (258, 'Mozambique'),(95, 'Myanmar'),(264, 'Namibia'),(674, 'Nauru'),(977, 'Nepal'),(31, 'Netherlands'),(599, 'Netherlands Ant.'),(687, 'New Caledonia'),       (64, 'New Zealand'),(505, 'Nicaragua'),(227, 'Niger'),(234, 'Nigeria'),(47, 'Norway'),(968, 'Oman'),(92, 'Pakistan'),(680, 'Palau'),(507, 'Panama'),       (675, 'Papua N. Guinea'),(595, 'Paraguay'),(51, 'Peru'),(63, 'Philippines'),(48, 'Poland'),(351, 'Portugal'),(974, 'Qatar'),(262, 'Réunion'),       (40, 'Romania'),(7, 'Russia, Kazakhstan'),(250, 'Rwanda'),(508, 'Saint Pierre a. M.'),(239, 'São Tome a. P.'),(685, 'Samoa'),(378, 'San Marino'),       (966, 'Saudi Arabia'),(221, 'Senegal'),(381, 'Serbia'),(248, 'Seychelles'),(232, 'Sierra Leone'),(65, 'Singapore'),(421, 'Slovak Republic'),       (386, 'Slovenia'),(677, 'Solomon Islands'),(252, 'Somalia'),(27, 'South Africa'),(82, 'South Korea'),(34, 'Spain'),(94, 'Sri Lanka'),(249, 'Sudan'),       (597, 'Suriname'),(268, 'Swaziland'),(46, 'Sweden'),(41, 'Switzerland'),(963, 'Syria'),(886, 'Taiwan'),(992, 'Tajikistan'),(255, 'Tanzania'),       (66, 'Thailand'),(228, 'Togo'),(676, 'Tonga'),(216, 'Tunisia'),(90, 'Turkey'),(993, 'Turkmenistan'),(688, 'Tuvalu'),(971, 'UAE'),(256, 'Uganda'),       (380, 'Ukraine'),(44, 'United Kingdom'),(598, 'Uruguay'),(1, 'USA, Canada'),(998, 'Uzbekistan'),(678, 'Vanuatu'),(58, 'Venezuela'),       (84, 'Vietnam'),(967, 'Yemen'),(260, 'Zambia'),(263, 'Zimbabwe');");                         Db::getInstance()->Execute("INSERT INTO "._DB_PREFIX_."sp_maps (`area`, `number`) VALUES       (1, 9),(1, 10),(7, 10),(7, 10),(7, 10),(20, 9),(27, 6),(27, 7),(27, 8),(27, 9),(27, 10),(27, 11),(27, 12),       (30, 10),(31, 9),(32, 9),(33, 9),(34, 9),(36, 9),(39, 10),(40, 9),(41, 9),(43, 10),(43, 11),(44, 10),(44, 10),(45, 8),       (45, 8),(46, 9),(47, 8),(48, 9),(48, 9),(48, 9),(49,10),(49, 11),(51, 10),(51, 11),(52, 10),(53, 7),(53, 8),(53, 9),       (54, 10),(55, 10),(56, 9),(57, 10),(58, 10),(60, 8),(60, 9),(61, 9),(62,9),(62, 10),(62, 11),(63, 9),(63, 10),(64, 8),       (64, 9),(64, 10),(65, 8),(66, 9),(81, 10),(82, 9),(82, 10),(84, 9),(84, 10),(86, 11),(90,10),(90, 10),(90, 10),(91, 10),       (92, 10),(93, 9),(94, 9),(95, 8),(98, 10),(212, 9),(213, 9),(216, 8),(218, 9),(220, 7),(221, 9),(222, 7),(222, 7),(223, 8),       (224, 8),(225, 8),(226, 8),(227, 8),(228, 7),(229, 8),(230, 7),(231, 7),(231, 7),(231, 8),(232, 8),(233, 8),(233,9),(234, 8),       (234, 10),(235, 7),(236, 8),(236, 8),(237, 8),(238, 7),(239, 6),(240, 6),(241, 8),(242, 7),(243, 9),(243, 9),(244, 9),(245,7),       (248, 6),(248, 7),(249, 9),(250, 9),(251, 9),(252, 7),(252, 7),(253, 6),(254, 9),(255, 9),(256, 9),(257, 8),(258, 9),(260,8),       (261, 9),(262, 9),(263, 6),(263, 7),(263, 8),(263, 9),(263, 10),(264, 9),(265, 7),(265, 7),(265, 9),(266, 8),(267, 8),(268, 7),       (269,7),(291, 7),(291, 7),(297, 7),(297, 7),(298, 6),(299, 6),(350, 8),(351, 9),(352, 9),(352, 10),(353, 9),(353, 10),(354, 7),       (354, 7),(354,9),(355, 9),(356, 8),(357, 8),(358, 6),(358, 6),(358, 8),(358, 9),(358, 10),(358, 10),(358, 11),(359, 8),(359, 9),       (370, 8),(370, 8),(371, 8),(371, 8),(371, 8),(372, 8),(373, 8),(374, 8),(375, 9),(375, 9),(376, 6),(377, 8),(377, 9),(378, 9),(378, 10),       (378, 11),(378, 12),(378, 13),(380, 9),(381, 8),(381, 9),(382, 7),(382, 8),(382, 9),(382, 10),(385, 8),(385, 9),(386, 8),(387, 8),       (389, 8),(420, 9),(420, 9),(420, 9),(421, 9),(421, 9),(423, 7),(423, 9),(500, 5),(501, 7),(502, 8),(503, 8),(504, 8),(505, 8),(506, 8),       (507, 8),(508, 6),(509, 8),(590,9),(594,9),(591, 8),(592, 7),(593, 8),(595, 9),(596, 9),(597, 7),(598, 8),(599, 7),(599, 8),(673, 7),(674, 7),       (675, 8),(676, 5),(676, 7),(677,5),(677, 7),(678, 7),(679, 7),(680, 7),(682, 5),(685, 7),(686, 5),(686, 5),(687, 6),(688, 5),(852, 7),       (852, 8),(852, 8),(852,12),(853, 8),(855, 8),(856, 9),(880, 10),(886, 8),(886, 9),(960, 7),(961, 7),(962, 9),(963, 9),(964, 10),(965, 8),       (966, 9),(967, 9),(968, 8),(971, 9),(972, 9),(973, 8),(973, 8),(974, 7),(974, 7),(975, 8),(976, 8),(977, 9),       (992, 9),(993, 8),(994, 9),(995, 8),(995, 9),(996,9),(998, 9);");       endif;                  $pole_lang1 = null;    $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."lang order by id_lang");    if (is_array($result))     foreach ($result AS $row)     {      $pole_lang1[$row['id_lang']] = "SMS";        }      $this->installModuleTab('Empty', $pole_lang1, 0);            $pole_lang1 = null; $pole_lang2 = null; $pole_lang3 = null; $pole_lang4 = null;    $pole_lang5 = null; $pole_lang6 = null; $pole_lang7 = null; $pole_lang8 = null;$pole_lang9 = null;    $pole_lang10 = null; $pole_lang11 = null;    $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."lang order by id_lang");     $idTab = Tab::getIdFromClassName("Empty");    if (is_array($result))     foreach ($result AS $row)     {            $pole_lang1[$row['id_lang']] = v_smsprestashop_admin;       $pole_lang2[$row['id_lang']] = v_smsprestashop_customer;       $pole_lang3[$row['id_lang']] = v_smsprestashop_settings;       $pole_lang4[$row['id_lang']] = v_smsprestashop_history;       $pole_lang5[$row['id_lang']] = v_smsprestashop_credit;       $pole_lang6[$row['id_lang']] = v_smsprestashop_marketing;       $pole_lang7[$row['id_lang']] = v_smsprestashop_answers;       $pole_lang8[$row['id_lang']] = v_smsprestashop_send;       $pole_lang9[$row['id_lang']] = v_smsprestashop_about;       $pole_lang10[$row['id_lang']] = v_adminsmsprofile_editaccount;      $pole_lang11[$row['id_lang']] = v_smsprestashop_smscharging;     }        $this->installModuleTab('AdminSmsProfile', $pole_lang10, $idTab);    $this->installModuleTab('SendSms', $pole_lang8, $idTab);    $this->installModuleTab('SmsMarketing', $pole_lang6, $idTab);    $this->installModuleTab('SmsHistory', $pole_lang4, $idTab);    $this->installModuleTab('SmsAnswers', $pole_lang7, $idTab);      $this->installModuleTab('AdminSms', $pole_lang1, $idTab);    $this->installModuleTab('CustomerSms', $pole_lang2, $idTab);    $this->installModuleTab('SmsCharging', $pole_lang11, $idTab);    $this->installModuleTab('SmsWizard', $pole_lang3, $idTab);    $this->installModuleTab('PayPal123', $pole_lang5, $idTab);    $this->installModuleTab('About', $pole_lang9, $idTab);            $this->registerHook('displayFooter');            $this->registerHook('actionCartSave');      $this->registerHook('actionOrderStatusPostUpdate');        $this->registerHook('actionOrderReturn');    $this->registerHook('actionOrderSlipAdd');          $this->registerHook('actionPaymentConfirmation');    $this->registerHook('actionAdminOrdersTrackingNumberUpdate');        $this->registerHook('actionCustomerAccountAdd');      $this->registerHook('actionProductDelete');    $this->registerHook('actionUpdateQuantity');    $this->registerHook('actionValidateOrder');    $this->registerHook('actionProductOutOfStock');    $this->registerHook('actionProductCancel');          return true;                }                               public function hookDisplayFooter($params)   {     global $smarty;         if(  ( strstr($_SERVER["PHP_SELF"], "contact-form.php") || strstr($_SERVER["QUERY_STRING"], "controller=contact")   )   && $smarty->tpl_vars["confirmation"]->value==1):      $message = "contactformhook";    $paramsnew["message"] = $smarty->tpl_vars["message"]->value;    $paramsnew["id_contact"] = $_POST["id_contact"];    $paramsnew["id_order"] = $_POST["id_order"];    $paramsnew["id_product"] = $_POST["id_product"];    $paramsnew["email"] = $smarty->tpl_vars["email"]->value;       $this->makeuni ($paramsnew, $message);             endif;       }           public function hookActionCartSave($params)   {   global $cookie;   @$id_lang = $params["cart"]->id_lang;   @$id_currency = $params["cart"]->id_currency;   @$id_customer = $params["cart"]->id_customer;   @$id_cart = $params["cart"]->id;   @$id_shop = $params["cart"]->id_shop;   @$polll22s = null;     $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."product where ean13 like '23239512311' limit 1 ");            if (is_array($result)):             foreach ($result AS $row)             {               $id_product1 =  $row["id_product"];                                        }            endif;            if($id_product1>0):           $polk44 = $polll22s;           $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."sp_optout_deleted where cart_ID=".$id_cart." and currency=".$id_currency);       if (is_array($result)):        foreach ($result AS $row)        {          $ID =  $row["ID"];        }       endif;             if(!$ID>0):                   $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."sp_optout_prices where shop_id=".$id_shop);          if (is_array($result)):           foreach ($result AS $row)           {             $active =  $row["active"];            $price = $row["price"];           }          endif;            $pocccc22=0; $pocccc2=0;          $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."cart_product where id_shop=".$id_shop." and id_cart=".$id_cart);             if (is_array($result)):              foreach ($result AS $row)              {                $pocccc22++;               if($row["id_product"]== $id_product1) $pocccc2++;              }             endif;            if($active>0):                       if(!$pocccc2>0 && $pocccc22!=$pocccc2):              $result = Db::getInstance()->Execute("INSERT INTO "._DB_PREFIX_."cart_product (`id_cart`, `id_product`, `id_address_delivery`, `id_shop`, `id_product_attribute`, `quantity`, `date_add`) VALUES               (".$id_cart.", ".$id_product1.", 0, ".$id_shop.", 0, 1, NOW());");               $result = Db::getInstance()->Execute("insert into "._DB_PREFIX_."sp_optout_deleted values (NULL,'".$id_cart."','".$id_currency."')");               elseif($pocccc2>0 && $pocccc22==$pocccc2):                 $result = Db::getInstance()->Execute("delete FROM "._DB_PREFIX_."cart_product where id_shop=".$id_shop." and id_cart='".$id_cart."' and id_product=".$id_product1." ");                 $result = Db::getInstance()->Execute("delete from "._DB_PREFIX_."sp_optout_deleted where cart_ID='".$id_cart."' and currency='".$id_currency."'" );                        elseif($pocccc2>1):                 $uzzz = $pocccc2-1;                 $result = Db::getInstance()->Execute("delete FROM "._DB_PREFIX_."cart_product where id_shop=".$id_shop." and id_cart='".$id_cart."' and id_product=".$id_product1." limit ".$uzzz);                                           endif;                            else:           if($pocccc2>0):            $result = Db::getInstance()->Execute("delete FROM "._DB_PREFIX_."cart_product where id_shop=".$id_shop." and id_cart='".$id_cart."' and id_product=".$id_product1." ");         endif;         if($id_cart>0) $result = Db::getInstance()->Execute("insert into "._DB_PREFIX_."sp_optout_deleted values (NULL,'".$id_cart."','".$id_currency."')");              endif;                         @$result = Db::getInstance()->Execute("update "._DB_PREFIX_."cart_product set quantity=1 where id_product=".$id_product1);                  else:         @$result = Db::getInstance()->Execute("update "._DB_PREFIX_."cart_product set quantity=1 where id_product=".$id_product1);        $pocccc22=0; $pocccc2=0;          $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."cart_product where id_shop=".$id_shop." and id_cart=".$id_cart);             if (is_array($result)):              foreach ($result AS $row)              {                $pocccc22++;               if($row["id_product"]== $id_product1) $pocccc2++;              }             endif;                if($pocccc2>0 && $pocccc22==$pocccc2):                 $result = Db::getInstance()->Execute("delete FROM "._DB_PREFIX_."cart_product where id_shop=".$id_shop." and id_cart='".$id_cart."' and id_product=".$id_product1." ");                 $result = Db::getInstance()->Execute("delete from "._DB_PREFIX_."sp_optout_deleted where cart_ID='".$id_cart."' and currency='".$id_currency."'" );                            elseif($pocccc2>1):        $uzzz = $pocccc2-1;        $result = Db::getInstance()->Execute("delete FROM "._DB_PREFIX_."cart_product where id_shop=".$id_shop." and id_cart='".$id_cart."' and id_product=".$id_product1." limit ".$uzzz);        endif;                                                        endif;      endif;           return true;             }                       public function hookActionOrderStatusPostUpdate($params)    {    $message = "actionOrderStatusPostUpdate";    $utils2 = new Utils();    $utils2->loadSmsProfile();    $this->user5 =  $utils2->user5;    $this->passwd5 =  $utils2->passwd5;    $this->simulate5 =  $utils2->simulate5;    $this->pref_billing =  $utils2->pref_billing;        $admins1 = null;    $cislo = $params["newOrderStatus"]->id;     $id_order_base = $params["id_order"];    $order_id = sprintf("%06d",($id_order_base));           $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."sp_hooks where name like 'actionOrderStatusPostUpdate' and status=".$cislo." ");     if (is_array($result)):      foreach ($result AS $row)      {       $hooks_info = "";       $hooks_info =  $row["info"];         }     endif;       $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."sp_hooks_admins where name like 'actionOrderStatusPostUpdate' and status=".$cislo."  and adminIDs not like ''");     if (is_array($result)):      foreach ($result AS $row)      {       $admins = null;       $admins1 =  $row["adminIDs"];       $smstext_admin =  $row["smstext"];       $admins = explode(";",$admins1);      }     endif;            $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."sp_hooks_customers where name like 'actionOrderStatusPostUpdate' and status=".$cislo." and active=1");     $smstext_customer = null;     if (is_array($result)):      foreach ($result AS $row)      {       $smstext_customer[$row["mutation"]] =  $row["smstext"];      }     endif;       $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."currency ");     $arr_currency = null;     if (is_array($result)):      foreach ($result AS $row)      {       $arr_currency[$row["id_currency"]] =  $row["iso_code"];      }     endif;           $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."orders where id_order like '".$id_order_base."' ");            if (is_array($result)):       foreach ($result AS $row)       {        $customer_id =  $row["id_customer"];        $id_address_delivery =  $row["id_address_delivery"];        $id_address_invoice =  $row["id_address_invoice"];        $order_payment =  $row["payment"];        $order_total_paid =  $row["total_paid"];         $order_currency =  $arr_currency[$row["id_currency"]];        $order_date =  $row["date_add"];         $shop_id =  $row["id_shop"];        $id_cart = $row["id_cart"];        $order_reference =  $row["reference"];        $order_shipping_number =  $row["shipping_number"];        $order_date1 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\3.\\2.\\1",$row["date_add"] );        $order_date2 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\3/\\2/\\1",$row["date_add"] );          $order_date3 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\3-\\2-\\1",$row["date_add"] );               $order_date4 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\1-\\2-\\3",$row["date_add"] );         $order_date5 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\2.\\3.\\1",$row["date_add"] );         $order_date6 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\2/\\3/\\1",$row["date_add"] );         $order_date7 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\2-\\3-\\1",$row["date_add"] );         $order_time =   preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\4:\\5",$row["date_add"] );         $order_time1 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\4:\\5:\\6",$row["date_add"] );        }      endif;                  if($shop_id>0):                     $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."configuration where id_shop=".$shop_id." and name IN ('PS_SHOP_EMAIL','PS_SHOP_PHONE')");       if (is_array($result)):        foreach ($result AS $row)        {         if($row['name']=="PS_SHOP_EMAIL") $shop_email = $row['value'];         if($row['name']=="PS_SHOP_PHONE") $shop_phone = $row['value'];        }       endif;               $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."shop_url where id_shop=".$shop_id);       if (is_array($result)):        foreach ($result AS $row)        {          $shop_domain = $row['domain'];        }       endif;            $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."shop where id_shop=".$shop_id);       if (is_array($result)):        foreach ($result AS $row)        {          $shop_name = $row['name'];        }       endif;                         else:                 $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."configuration where name IN ('PS_SHOP_DOMAIN','PS_SHOP_NAME','PS_SHOP_EMAIL','PS_SHOP_PHONE')");       if (is_array($result)):        foreach ($result AS $row)        {         if($row['name']=="PS_SHOP_DOMAIN") $shop_domain = $row['value'];         if($row['name']=="PS_SHOP_NAME") $shop_name = $row['value'];         if($row['name']=="PS_SHOP_EMAIL") $shop_email = $row['value'];         if($row['name']=="PS_SHOP_PHONE") $shop_phone = $row['value'];        }       endif;     endif;             $neposilat = 0; $aspoc = 0; $aspoc2 = 0;       if($customer_id>0):                        $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."sp_optout_prices where active=1 and shop_id=".$shop_id);        $currency1 = null;          if (is_array($result)):           foreach ($result AS $row)           {              $aspoc++;                      }          endif;       if($aspoc>0):          $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."product where ean13 like '23239512311'  limit 1");          if (is_array($result)):           foreach ($result AS $row)           {               $id_product =  $row["id_product"];             }          endif;                    $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."cart_product where id_product=".$id_product." and id_cart=".$id_cart."  limit 1");          if (is_array($result)):           foreach ($result AS $row)           {                $aspoc2++;             }          endif;                  if(!$aspoc2>0):            $neposilat = 1;         endif;                  endif;                    $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."lang where iso_code='".lang_iso_code."'");        if (is_array($result)):         foreach ($result AS $row)         {          $id_lang = $row["id_lang"];         }        endif;        if(!$id_lang>0):         $id_lang = 1;        endif;            $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."country_lang where id_lang=".$id_lang);       if (is_array($result)):        foreach ($result AS $row)        {         $country_name[$row["id_country"]] =  $row["name"];                 }       endif;              $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."country");       if (is_array($result)):        foreach ($result AS $row)        {         $country[$row["id_country"]] =  $country_name[$row["id_country"]] ;         $country_prefix[$row["id_country"]] =  $row["call_prefix"] ;                 }       endif;                     $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."state");       if (is_array($result)):        foreach ($result AS $row)        {         $statename[$row["id_state"]] =  $row["name"] ;                 }       endif;          $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."address where id_address like '".$id_address_delivery."' ");       if (is_array($result)):        foreach ($result AS $row)        {         $customer_company =  $row["company"];         $customer_lastname =  $row["lastname"];         $customer_firstname =  $row["firstname"];         $customer_address =  $row["address1"];         if(strlen($row["address2"])>0)  $customer_address .= ", ".$row["address2"];         $customer_postcode =  $row["postcode"];         $customer_city =  $row["city"];         $customer_country = $country[$row["id_country"]];         $customer_state = $statename[$row["id_state"]];                  if(strtolower($customer_city)=="indonesia"):           $customer_country_prefix = "62";         else:           $customer_country_prefix = $country_prefix[$row["id_country"]];         endif;                  $customer_phone = $row["phone"];         $customer_mobile = $row["phone_mobile"];         $customer_vat_number = $row["vat_number"];        }       endif;         $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."customer where id_customer=".$customer_id);       if (is_array($result)):        foreach ($result AS $row)        {         $customer_email =  $row["email"] ;                 }       endif;                 $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."address where id_address like '".$id_address_invoice."' ");       if (is_array($result)):        foreach ($result AS $row)        {         $customer_invoice_company =  $row["company"];         $customer_invoice_lastname =  $row["lastname"];         $customer_invoice_firstname =  $row["firstname"];         $customer_invoice_address =  $row["address1"];         if(strlen($row["address2"])>0)  $customer_invoice_address .= ", ".$row["address2"];         $customer_invoice_postcode =  $row["postcode"];         $customer_invoice_city =  $row["city"];         $customer_invoice_country = $country[$row["id_country"]];         $customer_invoice_state = $statename[$row["id_state"]];                  if(strtolower($customer_invoice_city)=="indonesia"):           $customer_invoice_country_prefix = "62";         else:           $customer_invoice_country_prefix = $country_prefix[$row["id_country"]];         endif;                  $customer_invoice_phone = $row["phone"];         $customer_invoice_mobile = $row["phone_mobile"];         $customer_invoice_vat_number = $row["vat_number"];        }       endif;                endif;         global $cookie;       $employee_id = $cookie->id_employee;       $employee_email = $cookie->email;                 if(count($smstext_customer)>0 && $neposilat==0):       $mobile = ""; $prefix = "";       if($this->pref_billing==1):             if(strlen($customer_invoice_mobile)>0): $mobile = $customer_invoice_mobile; $prefix = $customer_invoice_country_prefix;           elseif(strlen($customer_mobile)>0):  $mobile = $customer_mobile; $prefix = $customer_country_prefix;           elseif(strlen($customer_invoice_phone)>0):  $mobile = $customer_invoice_phone; $prefix = $customer_invoice_country_prefix;           elseif(strlen($customer_phone)>0):  $mobile = $customer_phone; $prefix =  $customer_country_prefix;           endif;       else:             if(strlen($customer_mobile)>0): $mobile = $customer_mobile; $prefix = $customer_country_prefix;           elseif(strlen($customer_invoice_mobile)>0):  $mobile = $customer_invoice_mobile; $prefix = $customer_invoice_country_prefix;           elseif(strlen($customer_phone)>0):  $mobile = $customer_phone; $prefix =  $customer_country_prefix;           elseif(strlen($customer_invoice_phone)>0):  $mobile = $customer_invoice_phone; $prefix = $customer_invoice_country_prefix;           endif;          endif;             $ok1 = 0; $area = "";     $mobile = trim($mobile);     @$mobile = preg_replace("/ /","",$mobile);     @$mobile = preg_replace("/-/","",$mobile);     @$mobile = preg_replace("/\(/","",$mobile);     @$mobile = preg_replace("/\)/","",$mobile);     if( substr($mobile,0,2)=="00" ):  $mobile = substr($mobile,2,strlen($mobile));      elseif( substr($mobile,0,1)=="+" ):  $mobile = substr($mobile,1,strlen($mobile));      endif;      $length1 = strlen($mobile);       $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."sp_maps ");       if (is_array($result)):        foreach ($result AS $row)        {         if( preg_match("/^".$row["area"]."/",$mobile, $regs) ):          $area=substr($mobile,0,strlen($row["area"]));           $numberr = $row["number"];           if( ($length1-strlen($row["area"]))==$numberr  ):           $ok1 = 1;           continue;          endif;         endif;        }       endif;        @$ccdef = constant("country_prefix_def_".$prefix);     @$cclength = constant("country_prefix_def_length_".$prefix);     @$cctrim = constant("country_prefix_trim_char_".$prefix);     @$length_ex = strlen($ccdef);       if($ok1 == 0 && $length_ex>0 && substr($mobile,0,$length_ex)==$ccdef && strlen($mobile)==$cclength):       $mobile = $prefix.substr($mobile,$cctrim,strlen($mobile));        $area = $prefix;      elseif($ok1 == 0):      if( substr($mobile,0,1)=="0" ):  $mobile = $prefix.substr($mobile,1,strlen($mobile));       else: $mobile = $prefix.$mobile;       endif;       $area = $prefix;     endif;     $area_i = '';     if( strlen($smstext_customer[$area])>0 ):      $smstext = $smstext_customer[$area];      $area_i = $area;     else:      $smstext = $smstext_customer['default'];      $area_i = 'default';     endif;      $smstext_final = "";     $smstext = str_replace("\$","",$smstext);     $smstext = str_replace("{","{\$",$smstext);     $smstext2 = "\$smstext_final = \"".$smstext."\";";     @eval($smstext2);     $unicode = Utils::getHooksUnicode($area_i, 'customer' );     $smstext_final = html_entity_decode($smstext_final, ENT_QUOTES, 'UTF-8');     $ems_pocet = Utils::CountSms($smstext_final, $unicode);       if( strlen($mobile)>4 ):       $poll77 = null; $u_sender="";       $poll77 = Utils::getGate($mobile, "customer");            if(count($poll77)>0):         $add123 = "&isms=".$poll77["isms"]."&sender=".$poll77["senderID"];         $u_sender = $poll77["senderID"];        endif;       $data = "action=sendsms&username=".$this->user5."&password=".$this->passwd5."&unicode=".$unicode."&data=".$smstext_final."&number=".$mobile.$add123;        $obj = new Utils();          if($this->simulate5==1):         $this->connserver = 29; $obj->server_data = "";        else:         $this->connserver = $obj->server_post($data);        endif;          if($this->connserver==1):              $server_data =  $obj->server_data;         if(preg_match("/<b>(.*)<\/b><u>(.*)<\/u>/i", $server_data, $regs21)):            $kod = $regs21[1];           $info = $regs21[2];          endif;         $smstext_final = addslashes($smstext_final);         if($kod==1 || $kod==11):           $polll = null;            $polll = explode("__",$info);           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','1','".$polll[1]."','".$polll[2]."','".$u_sender."','".$unicode."','2','".$polll[0]."','','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);                  elseif($kod==3 && $info==9):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_wrongnr;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','".$polll[1]."','".$polll[2]."','".$u_sender."','".$unicode."','2','".$polll[0]."','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);                    elseif($kod==3 && $info==15):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_unauthorized;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           elseif($kod==3 && $info==10):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_lowcredit;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           elseif($kod==3 && $info==22):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_nounicode;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);                 elseif($kod==3):           $polll = null;            $polll = explode("__",$info);           $pozn = $info;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           elseif($kod==4):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_loginerror;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           endif;          elseif($this->connserver==2):            $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_cantconnect;           $smstext_final = addslashes($smstext_final);           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);          elseif($this->connserver==29):            $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_simulation;           $smstext_final = addslashes($smstext_final);           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);          endif;         else:           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_nrunknown;           $smstext_final = addslashes($smstext_final);           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'".v_smsprestashop_notfound."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);          endif;             endif;              if(count($admins)>0):     $array_admins = null; $array_admins_names = null;     $array_admins = Utils::getAdminNumbers();     $array_admins_names = Utils::getAdminNames();     $smstext_final = "";     $smstext = $smstext_admin;     $smstext = str_replace("\$","",$smstext);     $smstext = str_replace("{","{\$",$smstext);     $smstext2 = "\$smstext_final = \"".$smstext."\";";     @eval($smstext2);     $unicode = Utils::getHooksUnicode('default', 'admin' );     $smstext_final = html_entity_decode($smstext_final, ENT_QUOTES, 'UTF-8');     $ems_pocet = Utils::CountSms($smstext_final, $unicode);     while(list($key, $value) = @each($admins))       {       $poll77 = null; $u_sender="";       $poll77 = Utils::getGate($array_admins[$value], "admin");            if(count($poll77)>0):         $add123 = "&isms=".$poll77["isms"]."&sender=".$poll77["senderID"];         $u_sender = $poll77["senderID"];        endif;       $data = "action=sendsms&username=".$this->user5."&password=".$this->passwd5."&unicode=".$unicode."&data=".$smstext_final."&number=".$array_admins[$value].$add123;        $obj = new Utils();          if($this->simulate5==1):         $this->connserver = 29; $obj->server_data = "";        else:         $this->connserver = $obj->server_post($data);        endif;          if($this->connserver==1):              $server_data =  $obj->server_data;         if(preg_match("/<b>(.*)<\/b><u>(.*)<\/u>/i", $server_data, $regs21)):            $kod = $regs21[1];           $info = $regs21[2];          endif;         $smstext_final = addslashes($smstext_final);         if($kod==1 || $kod==11):           $polll = null;            $polll = explode("__",$info);           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','1','".$polll[1]."','".$polll[2]."','".$u_sender."','".$unicode."','1','".$polll[0]."','','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);                  elseif($kod==3 && $info==9):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_wrongnr;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','".$polll[1]."','".$polll[2]."','".$u_sender."','".$unicode."','1','".$polll[0]."','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);                    elseif($kod==3 && $info==15):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_unauthorized;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','1','','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           elseif($kod==3 && $info==10):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_lowcredit;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','1','','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           elseif($kod==3 && $info==22):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_nounicode;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','1','','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);                 elseif($kod==3):           $polll = null;            $polll = explode("__",$info);           $pozn = $info;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','1','','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           elseif($kod==4):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_loginerror;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','1','','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           endif;          elseif($this->connserver==2):            $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_cantconnect;           $smstext_final = addslashes($smstext_final);           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','1','','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);          elseif($this->connserver==29):            $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_simulation;           $smstext_final = addslashes($smstext_final);           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','1','','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);          endif;      }            endif;                return true;   }                                       public function hookActionValidateOrder ($params)    {    $message = "actionValidateOrder";            $this->makeuni ($params, $message);       return true;    }         public function hookActionOrderReturn($params)    {    $message = "actionOrderReturn";      $this->makeuni ($params, $message);              return true;    }       public function hookActionOrderSlipAdd($params)    {    $message = "actionOrderSlipAdd";          $this->makeuni ($params, $message);      return true;    }         public function hookActionAdminOrdersTrackingNumberUpdate($params)    {    $message = "actionAdminOrdersTrackingNumberUpdate";        $this->makeuni ($params, $message);               return true;    }         public function hookActionPaymentConfirmation($params)    {    $message = "actionPaymentConfirmation";         $this->makeuni ($params, $message);              return true;    }               public function hookActionCustomerAccountAdd($params)    {    $message = "actionCustomerAccountAdd";      $this->makeuni ($params, $message);              return true;    }       public function hookActionProductDelete($params)    {    $message = "actionProductDelete";            $this->makeuni ($params, $message);              return true;    }       public function hookActionUpdateQuantity($params)    {    $message = "actionUpdateQuantity";             $this->makeuni ($params, $message);           return true;    }       public function hookActionProductOutOfStock($params)    {    $message = "actionProductOutOfStock";               $this->makeuni ($params, $message);           }       public function hookActionProductCancel($params)    {    $message = "actionProductCancel";              $this->makeuni ($params, $message);      return true;    }           public function makeuni ($params2, $what)    {        $utils2 = new Utils();     $utils2->loadSmsProfile();     $this->user5 =  $utils2->user5;     $this->passwd5 =  $utils2->passwd5;     $this->simulate5 =  $utils2->simulate5;       $this->pref_billing =  $utils2->pref_billing;        $admins = null;     $ok10 = 0;                    if($what=="contactformhook"):              $customer_message = $params2['message'];        $customer_message_short1 = substr($customer_message,0,120);       $customer_message_short2 = substr($customer_message,0,100);       $customer_message_short3 = substr($customer_message,0,80);            $id_order_base = $params2['id_order'];        $order_id = sprintf("%06d",($id_order_base));       $product_id =  $params2['id_product'];        $customer_email =  $params2['email'];        $contact_id =  $params2['id_contact'];        $ok10 = 1;                   elseif($what=="actionCustomerAccountAdd"):           $customer_id = $params2["newCustomer"]->id;       $shop_id = $params2["newCustomer"]->id_shop;        $ok10 = 1;           $id_address_delivery = 0;       $id_address_invoice = 0;       $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."address where id_customer=".$customer_id." AND deleted=0 AND active=1 ORDER BY phone_mobile DESC LIMIT 1");       if (is_array($result)):        foreach ($result AS $row)        {         $id_address_delivery = $row['id_address'];          $id_address_invoice = $row['id_address'];         }       endif;              elseif($what=="actionValidateOrder"):         $customer_id = $params2["cart"]->id_customer;        $cart_id =  $params2["cart"]->id;           $id_order_base = $params2["order"]->id;        $order_id = sprintf("%06d",($id_order_base));       $shop_id = $params2["order"]->id_shop;              $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."message where id_customer=".$customer_id." AND id_cart=".$cart_id."  LIMIT 1");       if (is_array($result)):        foreach ($result AS $row)        {         $customer_message = $row['message'];         }       endif;            $ok10 = 1;       $newOrder1_pre=null; $newOrder2_pre=null; $newOrder3_pre=null; $newOrder4_pre=null; $newOrder5_pre = null;               $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."order_detail where id_order=".$id_order_base);         if (is_array($result)):          foreach ($result AS $row)          {           $newOrder1_pre[] = $row['product_id']."/".$row['product_name']."/".$row['product_quantity'];            $newOrder2_pre[] = "id: ".$row['product_id'].", ".v_smsprestashop_name.": ".$row['product_name'].", ".v_smsprestashop_qty.": ".$row['product_quantity'];           $newOrder3_pre[] = $row['product_id']."/".$row['product_quantity']."/".$row['product_quantity_reinjected'];            $newOrder4_pre[] = "id: ".$row['product_id'].", ".v_smsprestashop_qty.": ".$row['product_quantity'];            $newOrder5_pre[] = $row['product_id']."/".$row['product_reference']."/".$row['product_supplier_reference']."/".$row['product_ean13']."/".$row['product_upc']."/".$row['product_quantity'];                           }          $newOrder1 =  implode("; ",$newOrder1_pre);          $newOrder2 =  implode("; ",$newOrder2_pre);          $newOrder3 =  implode("; ",$newOrder3_pre);          $newOrder4 =  implode("; ",$newOrder4_pre);          $newOrder5 =  implode("; ",$newOrder5_pre);           endif;                     elseif($what=="actionProductOutOfStock"):         $product_id = $params2["product"]->id;        $product_quantity = $params2["product"]->quantity;        $product_minimal_quantity = $params2["product"]->minimal_quantity;               if($product_quantity>$product_minimal_quantity):        return false;       endif;              $shop_id = $params2["product"]->id_shop_default;        $product_name_pre = $params2["product"]->name;        if(is_array($product_name_pre)):       while(list($key, $value) = @each($product_name_pre))         {         $product_name = $value; continue;        }        else:       $product_name = $product_name_pre;       endif;         $ID123 = 0;       $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."sp_outofstock where datum like '".date("Y-m-d")."' and product_ID=".$product_id);       if (is_array($result)):        foreach ($result AS $row)        {         $ID123 = $row['ID'];         }       endif;        if($ID123>0):        return false;       else:        $result = Db::getInstance()->Execute("insert into "._DB_PREFIX_."sp_outofstock values (null,'".date("Y-m-d")."', '".$product_id."') ");       endif;            $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."product where id_product=".$product_id);       if (is_array($result)):        foreach ($result AS $row)        {         $product_ref = $row['reference'];          $product_supplier_ref = $row['supplier_reference'] ;         $product_ean13 = $row['ean13'] ;          $product_upc = $row['upc'] ;          $id_supplier = $row['id_supplier'];          $product_supplier_id = $id_supplier;        }       endif;                 $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."supplier where id_supplier  =".$product_supplier_id);       if (is_array($result)):        foreach ($result AS $row)        {         $product_supplier = $row['name'];              }       endif;              global $cookie;       $customer_id = $cookie->id_customer;       $ok10 = 1;           elseif($what=="actionProductDelete"):         $product_id = $params2["product"]->id;               $product_name_pre = $params2["product"]->name;        if(is_array($product_name_pre)):       while(list($key, $value) = @each($product_name_pre))         {         $product_name = $value; continue;        }        else:       $product_name = $product_name_pre;       endif;         $shop_id = $params2["product"]->id_shop_default;                            $product_ref =  $params2["product"]->reference;            $product_supplier_ref = $params2["product"]->supplier_reference;           $product_ean13 =  $params2["product"]->ean13;           $product_upc = $params2["product"]->upc;           $id_supplier = $params2["product"]->id_supplier;           $product_supplier_id = $id_supplier;                   $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."supplier where id_supplier  =".$product_supplier_id);       if (is_array($result)):        foreach ($result AS $row)        {         $product_supplier = $row['name'];              }       endif;              global $cookie;       $employee_id = $cookie->id_employee;       $employee_email = $cookie->email;               $ok10 = 1;           elseif($what=="actionUpdateQuantity"):             $product_id =  $params2["id_product"];        $product_quantity = $params2["quantity"];        $product_attribute_id =  $params2["id_product_attribute"];             $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."lang where iso_code='".lang_iso_code."'");         if (is_array($result)):          foreach ($result AS $row)          {           $id_lang = $row["id_lang"];          }         endif;         if(!$id_lang>0):         $id_lang = 1;         endif;           $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."product_lang where id_product=".$product_id." and id_lang=".$id_lang);       if (is_array($result)):        foreach ($result AS $row)        {         $product_name = $row['name'];           }       endif;             $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."product where id_product=".$product_id);       if (is_array($result)):        foreach ($result AS $row)        {         $product_ref = $row['reference'];          $product_supplier_ref = $row['supplier_reference'] ;         $product_ean13 = $row['ean13'] ;          $product_upc = $row['upc'] ;          $id_supplier = $row['id_supplier'];          $product_supplier_id = $id_supplier;         $shop_id_default = $row['id_shop_default'];           }       endif;                  $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."supplier where id_supplier  =".$product_supplier_id);       if (is_array($result)):        foreach ($result AS $row)        {         $product_supplier = $row['name'];              }       endif;       if($product_id>0):        $ok10 = 1;       endif;         global $cookie;       $customer_id = $cookie->id_customer;         $employee_id = $cookie->id_employee;       $employee_email = $cookie->email;                 $pol = null;       $shop_id_pre = $cookie->shopContext;       $pol = explode("-",$shop_id_pre);       $shop_id = $pol[1];              if(!$shop_id>0):        $shop_id = $shop_id_default;       endif;                    elseif($what=="actionProductCancel"):             $id_order_base = $params2["order"]->id;      $order_id = sprintf("%06d",($id_order_base));      $id_order_detail = $params2["id_order_detail"];      $shop_id = $params2["order"]->id_shop;         $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."order_detail where id_order_detail  =".$id_order_detail);       if (is_array($result)):        foreach ($result AS $row)        {         $product_id = $row['product_id'];          $product_name = $row['product_name'] ;         $product_quantity = $row['product_quantity'] ;          $product_quantity_reinjected = $row['product_quantity_reinjected'] ;          $product_quantity_in_stock = $row['product_quantity_in_stock'] ;         }       endif;                   if($product_quantity_reinjected==0):          $product_quantity_reinjected = $product_quantity_in_stock - $product_quantity;        endif;               $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."product where id_product=".$product_id);       if (is_array($result)):        foreach ($result AS $row)        {         $product_ref = $row['reference'];          $product_supplier_ref = $row['supplier_reference'] ;         $product_ean13 = $row['ean13'] ;          $product_upc = $row['upc'] ;          $id_supplier = $row['id_supplier'];          $product_supplier_id = $id_supplier;        }       endif;                       $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."supplier where id_supplier  =".$product_supplier_id);       if (is_array($result)):        foreach ($result AS $row)        {         $product_supplier = $row['name'];              }       endif;         global $cookie;       $employee_id = $cookie->id_employee;       $employee_email = $cookie->email;          $ok10 = 1;                   elseif($what=="actionPaymentConfirmation"):             $id_order_base = $params2["id_order"];      $order_id = sprintf("%06d",($id_order_base));                 global $cookie;       $employee_id = $cookie->id_employee;       $employee_email = $cookie->email;          $ok10 = 1;       elseif($what=="actionAdminOrdersTrackingNumberUpdate"):              $id_order_base = $params2["order"];      $order_id = sprintf("%06d",($id_order_base));              $id_order_base = $params2["order"]->id;      $order_id = sprintf("%06d",($id_order_base));      $shop_id = $params2["order"]->id_shop;              global $cookie;       $employee_id = $cookie->id_employee;       $employee_email = $cookie->email;          $ok10 = 1;                 elseif($what=="actionOrderSlipAdd"):          $id_order_base = $params2["order"]->id;      $order_id = sprintf("%06d",($id_order_base));      $customer_id = $params2["order"]->id_customer;        $orderSlip1_pre=null; $orderSlip2_pre=null; $orderSlip3_pre=null; $orderSlip4_pre=null; $orderSlip5_pre = null;         while(list($key2, $value2) = @each($params2["qtyList"]))         {         $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."order_detail where id_order_detail  =".$key2);         if (is_array($result)):          foreach ($result AS $row)          {           $orderSlip1_pre[] = $row['product_id']."/".$row['product_name']."/".$row['product_quantity']."/".$row['product_quantity_refunded'];            $orderSlip2_pre[] = "id: ".$row['product_id'].", ".v_smsprestashop_name.": ".$row['product_name'].", ".v_smsprestashop_qty.": ".$row['product_quantity'].", ".v_smsprestashop_qtyreinjected.": ".$row['product_quantity_refunded'];           $orderSlip3_pre[] = $row['product_id']."/".$row['product_quantity']."/".$row['product_quantity_refunded'];            $orderSlip4_pre[] = "id: ".$row['product_id'].", ".v_smsprestashop_qty.": ".$row['product_quantity'].", ".v_smsprestashop_qtyreinjected.": ".$row['product_quantity_refunded'];            $orderSlip5_pre[] = $row['product_id']."/".$row['product_reference']."/".$row['product_supplier_reference']."/".$row['product_ean13']."/".$row['product_upc']."/".$row['product_quantity']."/".$row['product_quantity_refunded'];                           }          $orderSlip1 = implode("; ",$orderSlip1_pre);          $orderSlip2 = implode("; ",$orderSlip2_pre);          $orderSlip3 = implode("; ",$orderSlip3_pre);          $orderSlip4 = implode("; ",$orderSlip4_pre);          $orderSlip5 = implode("; ",$orderSlip5_pre);           endif;        }           $ok10 = 1;       global $cookie;       $employee_id = $cookie->id_employee;       $employee_email = $cookie->email;                  elseif($what=="actionOrderReturn"):        $id_order_base = $params2["orderReturn"]->id_order;      $order_id = sprintf("%06d",($id_order_base));      $customer_id = $params2["orderReturn"]->id_customer;      $customer_question =  $params2["orderReturn"]->question;        $id_return =  $params2["orderReturn"]->id;      $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."order_return_detail where id_order_return=".$id_return);         if (is_array($result)):          foreach ($result AS $row)          {           $ar_id_det[] = $row['id_order_detail'];           $ar_qty_det[] = $row['product_quantity'];          }         endif;           $orderReturn1_pre=null; $orderReturn2_pre=null; $orderReturn3_pre=null; $orderReturn4_pre=null; $orderReturn5_pre = null;         while(list($key4, $value4) = @each($ar_id_det))         {         $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."order_detail where id_order_detail=".$value4);         if (is_array($result)):          foreach ($result AS $row)          {           $ewfe = $row['product_quantity']-$ar_qty_det[$key4];           if($ewfe==0):             $ewfe = $ar_qty_det[$key4];           endif;           $orderReturn1_pre[] = $row['product_id']."/".$row['product_name']."/".$row['product_quantity']."/".($ewfe);            $orderReturn2_pre[] = "id: ".$row['product_id'].", ".v_smsprestashop_name.": ".$row['product_name'].", ".v_smsprestashop_qty.": ".$row['product_quantity'].", ".v_smsprestashop_qtyreturned.": ".($ewfe);           $orderReturn3_pre[] = $row['product_id']."/".$row['product_quantity']."/".($ewfe);            $orderReturn4_pre[] = "id: ".$row['product_id'].", ".v_smsprestashop_qty.": ".$row['product_quantity'].", ".v_smsprestashop_qtyreturned.": ".($ewfe);            $orderReturn5_pre[] = $row['product_id']."/".$row['product_reference']."/".$row['product_supplier_reference']."/".$row['product_ean13']."/".$row['product_upc']."/".$row['product_quantity']."/".($ewfe);                           }          $orderReturn1 = implode("; ",$orderReturn1_pre);          $orderReturn2 = implode("; ",$orderReturn2_pre);          $orderReturn3 = implode("; ",$orderReturn3_pre);          $orderReturn4 = implode("; ",$orderReturn4_pre);          $orderReturn5 = implode("; ",$orderReturn5_pre);           endif;        }           $ok10 = 1;                 endif;               if($ok10==0) return false;                 $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."sp_hooks where name like '".$what."' ");     if (is_array($result)):      foreach ($result AS $row)      {       $hooks_info = "";       $hooks_info =  $row["name"];         }     endif;       $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."sp_hooks_admins where name like '".$what."' and adminIDs not like '' ");     if (is_array($result)):      foreach ($result AS $row)      {       $admins = null;       $admins1 =  $row["adminIDs"];       $smstext_admin =  $row["smstext"];       $admins = explode(";",$admins1);      }     endif;            $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."sp_hooks_customers where name like '".$what."' and active=1");     $smstext_customer = null;     if (is_array($result)):      foreach ($result AS $row)      {       $smstext_customer[$row["mutation"]] =  $row["smstext"];      }     endif;       $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."currency ");     $arr_currency = null;     if (is_array($result)):      foreach ($result AS $row)      {       $arr_currency[$row["id_currency"]] =  $row["iso_code"];      }     endif;         if($id_order_base>0):       $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."orders where id_order like '".$id_order_base."' ");            if (is_array($result)):       foreach ($result AS $row)       {        $customer_id =  $row["id_customer"];        $shop_id =  $row["id_shop"];        $id_address_delivery =  $row["id_address_delivery"];        $id_address_invoice =  $row["id_address_invoice"];        $order_payment =  $row["payment"];        $order_total_paid =  $row["total_paid"];         $order_currency =  $arr_currency[$row["id_currency"]];        $order_date =  $row["date_add"];         $id_cart = $row["id_cart"];        $order_shipping_number =  $row["shipping_number"];        $order_reference =  $row["reference"];        $order_date1 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\3.\\2.\\1",$row["date_add"] );        $order_date2 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\3/\\2/\\1",$row["date_add"] );          $order_date3 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\3-\\2-\\1",$row["date_add"] );               $order_date4 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\1-\\2-\\3",$row["date_add"] );         $order_date5 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\2.\\3.\\1",$row["date_add"] );         $order_date6 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\2/\\3/\\1",$row["date_add"] );         $order_date7 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\2-\\3-\\1",$row["date_add"] );         $order_time =   preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\4:\\5",$row["date_add"] );         $order_time1 =  preg_replace("/([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})/", "\\4:\\5:\\6",$row["date_add"] );        }      endif;     endif;                  if($shop_id>0):                     $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."configuration where id_shop=".$shop_id." and name IN ('PS_SHOP_EMAIL','PS_SHOP_PHONE')");       if (is_array($result)):        foreach ($result AS $row)        {         if($row['name']=="PS_SHOP_EMAIL") $shop_email = $row['value'];         if($row['name']=="PS_SHOP_PHONE") $shop_phone = $row['value'];        }       endif;               $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."shop_url where id_shop=".$shop_id);       if (is_array($result)):        foreach ($result AS $row)        {          $shop_domain = $row['domain'];        }       endif;            $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."shop where id_shop=".$shop_id);       if (is_array($result)):        foreach ($result AS $row)        {          $shop_name = $row['name'];        }       endif;                         else:                 $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."configuration where name IN ('PS_SHOP_DOMAIN','PS_SHOP_NAME','PS_SHOP_EMAIL','PS_SHOP_PHONE')");       if (is_array($result)):        foreach ($result AS $row)        {         if($row['name']=="PS_SHOP_DOMAIN") $shop_domain = $row['value'];         if($row['name']=="PS_SHOP_NAME") $shop_name = $row['value'];         if($row['name']=="PS_SHOP_EMAIL") $shop_email = $row['value'];         if($row['name']=="PS_SHOP_PHONE") $shop_phone = $row['value'];        }       endif;     endif;             $neposilat = 0; $aspoc = 0; $aspoc2 = 0;         if($customer_id>0):                            $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."sp_optout_prices where active=1 and shop_id=".$shop_id);        $currency1 = null;          if (is_array($result)):           foreach ($result AS $row)           {              $aspoc++;                      }          endif;       if($aspoc>0):          $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."product where ean13 like '23239512311'  limit 1");          if (is_array($result)):           foreach ($result AS $row)           {               $id_product =  $row["id_product"];             }          endif;                    $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."cart_product where id_product=".$id_product." and id_cart=".$id_cart."  limit 1");          if (is_array($result)):           foreach ($result AS $row)           {                $aspoc2++;             }          endif;                  if(!$aspoc2>0):            $neposilat = 1;         endif;                  endif;                            if($what=="actionCustomerAccountAdd"  || $what=="contactformhook"):             $neposilat = 0;          endif;               $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."customer where id_customer=".$customer_id);       if (is_array($result)):        foreach ($result AS $row)        {         $customer_email =  $row["email"] ;         $customer_lastname =  $row["lastname"];         $customer_firstname =  $row["firstname"];               }       endif;          $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."country_lang where id_lang=1 ");       if (is_array($result)):        foreach ($result AS $row)        {         $country_name[$row["id_country"]] =  $row["name"];                 }       endif;              $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."country");       if (is_array($result)):        foreach ($result AS $row)        {         $country[$row["id_country"]] =  $country_name[$row["id_country"]] ;         $country_prefix[$row["id_country"]] =  $row["call_prefix"] ;                 }       endif;                   $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."state");       if (is_array($result)):        foreach ($result AS $row)        {         $statename[$row["id_state"]] =  $row["name"] ;                 }       endif;          $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."address where id_address like '".$id_address_delivery."' ");       if (is_array($result)):        foreach ($result AS $row)        {         $customer_company =  $row["company"];         $customer_lastname =  $row["lastname"];         $customer_firstname =  $row["firstname"];         $customer_address =  $row["address1"];         if(strlen($row["address2"])>0)  $customer_address .= ", ".$row["address2"];         $customer_postcode =  $row["postcode"];         $customer_city =  $row["city"];         $customer_country = $country[$row["id_country"]];         $customer_state = $statename[$row["id_state"]];           if(strtolower($customer_city)=="indonesia"):           $customer_country_prefix = "62";         else:           $customer_country_prefix = $country_prefix[$row["id_country"]];         endif;                  $customer_phone = $row["phone"];         $customer_mobile = $row["phone_mobile"];         $customer_vat_number = $row["vat_number"];        }       endif;                  $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."address where id_address like '".$id_address_invoice."' ");       if (is_array($result)):        foreach ($result AS $row)        {         $customer_invoice_company =  $row["company"];         $customer_invoice_lastname =  $row["lastname"];         $customer_invoice_firstname =  $row["firstname"];         $customer_invoice_address =  $row["address1"];         if(strlen($row["address2"])>0)  $customer_invoice_address .= ", ".$row["address2"];         $customer_invoice_postcode =  $row["postcode"];         $customer_invoice_city =  $row["city"];         $customer_invoice_country = $country[$row["id_country"]];         $customer_invoice_state = $statename[$row["id_state"]];                  if(strtolower($customer_invoice_city)=="indonesia"):           $customer_invoice_country_prefix = "62";         else:           $customer_invoice_country_prefix = $country_prefix[$row["id_country"]];         endif;                 $customer_invoice_phone = $row["phone"];         $customer_invoice_mobile = $row["phone_mobile"];         $customer_invoice_vat_number = $row["vat_number"];        }       endif;                      endif;                         if(count($smstext_customer)>0 && $neposilat==0):       $mobile = ""; $prefix = "";          if($this->pref_billing==1):             if(strlen($customer_invoice_mobile)>0): $mobile = $customer_invoice_mobile; $prefix = $customer_invoice_country_prefix;           elseif(strlen($customer_mobile)>0):  $mobile = $customer_mobile; $prefix = $customer_country_prefix;           elseif(strlen($customer_invoice_phone)>0):  $mobile = $customer_invoice_phone; $prefix = $customer_invoice_country_prefix;           elseif(strlen($customer_phone)>0):  $mobile = $customer_phone; $prefix =  $customer_country_prefix;           endif;       else:             if(strlen($customer_mobile)>0): $mobile = $customer_mobile; $prefix = $customer_country_prefix;           elseif(strlen($customer_invoice_mobile)>0):  $mobile = $customer_invoice_mobile; $prefix = $customer_invoice_country_prefix;           elseif(strlen($customer_phone)>0):  $mobile = $customer_phone; $prefix =  $customer_country_prefix;           elseif(strlen($customer_invoice_phone)>0):  $mobile = $customer_invoice_phone; $prefix = $customer_invoice_country_prefix;           endif;          endif;         $ok1 = 0; $area = "";     $mobile = trim($mobile);     @$mobile = preg_replace("/ /","",$mobile);     @$mobile = preg_replace("/-/","",$mobile);     @$mobile = preg_replace("/\(/","",$mobile);     @$mobile = preg_replace("/\)/","",$mobile);     if( substr($mobile,0,2)=="00" ):  $mobile = substr($mobile,2,strlen($mobile));      elseif( substr($mobile,0,1)=="+" ):  $mobile = substr($mobile,1,strlen($mobile));      endif;       $length1 = strlen($mobile);      $result = Db::getInstance()->ExecuteS("SELECT * FROM "._DB_PREFIX_."sp_maps ");       if (is_array($result)):        foreach ($result AS $row)        {         if( preg_match("/^".$row["area"]."/",$mobile, $regs) ):          $area=substr($mobile,0,strlen($row["area"]));           $numberr = $row["number"];           if( ($length1-strlen($row["area"]))==$numberr  ):           $ok1 = 1;           continue;          endif;         endif;        }       endif;        @$ccdef = constant("country_prefix_def_".$prefix);     @$cclength = constant("country_prefix_def_length_".$prefix);     @$cctrim = constant("country_prefix_trim_char_".$prefix);     @$length_ex = strlen($ccdef);       if($ok1 == 0 && $length_ex>0 && substr($mobile,0,$length_ex)==$ccdef && strlen($mobile)==$cclength):       $mobile = $prefix.substr($mobile,$cctrim,strlen($mobile));        $area = $prefix;        elseif($ok1 == 0):      if( substr($mobile,0,1)=="0" ):  $mobile = $prefix.substr($mobile,1,strlen($mobile));       else: $mobile = $prefix.$mobile;       endif;       $area = $prefix;     endif;     $area_i = '';     if( strlen($smstext_customer[$area])>0 ):      $smstext = $smstext_customer[$area];      $area_i = $area;     else:      $smstext = $smstext_customer['default'];      $area_i = 'default';     endif;            $smstext_final = "";     $smstext = str_replace("\$","",$smstext);     $smstext = str_replace("{","{\$",$smstext);     $smstext2 = "\$smstext_final = \"".$smstext."\";";     @eval($smstext2);     $unicode = Utils::getHooksUnicode($area_i, 'customer' );     $smstext_final = html_entity_decode($smstext_final, ENT_QUOTES, 'UTF-8');     $ems_pocet = Utils::CountSms($smstext_final, $unicode);       if( strlen($mobile)>4 ):       $poll77 = null; $u_sender="";       $poll77 = Utils::getGate($mobile, "customer");            if(count($poll77)>0):         $add123 = "&isms=".$poll77["isms"]."&sender=".$poll77["senderID"];         $u_sender = $poll77["senderID"];        endif;       $data = "action=sendsms&username=".$this->user5."&password=".$this->passwd5."&unicode=".$unicode."&data=".$smstext_final."&number=".$mobile.$add123;        $obj = null;        $obj = new Utils();        if($this->simulate5==1):         $this->connserver = 29; $obj->server_data = "";        else:         $this->connserver = $obj->server_post($data);        endif;          if($this->connserver==1):              $server_data =  $obj->server_data;         if(preg_match("/<b>(.*)<\/b><u>(.*)<\/u>/i", $server_data, $regs21)):            $kod = $regs21[1];           $info = $regs21[2];          endif;         $smstext_final = addslashes($smstext_final);         if($kod==1 || $kod==11):           $polll = null;            $polll = explode("__",$info);           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','1','".$polll[1]."','".$polll[2]."','".$u_sender."','".$unicode."','2','".$polll[0]."','','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);                  elseif($kod==3 && $info==9):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_wrongnr;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','".$polll[1]."','".$polll[2]."','".$u_sender."','".$unicode."','2','".$polll[0]."','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);                    elseif($kod==3 && $info==15):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_unauthorized;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           elseif($kod==3 && $info==10):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_lowcredit;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           elseif($kod==3 && $info==22):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_nounicode;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);                 elseif($kod==3):           $polll = null;            $polll = explode("__",$info);           $pozn = $info;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           elseif($kod==4):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_loginerror;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           endif;          elseif($this->connserver==2):            $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_notconnected;           $smstext_final = addslashes($smstext_final);           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);          elseif($this->connserver==29):            $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_simulation;           $smstext_final = addslashes($smstext_final);           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$mobile."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);          endif;         else:           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_nrunknown;           $smstext_final = addslashes($smstext_final);           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'".v_smsprestashop_notfound."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','2','','".$pozn."','".$ems_pocet."',0,'".$customer_id."','".$customer_firstname." ".$customer_lastname."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);          endif;             endif;              if(count($admins)>0):       $array_admins = null;     $array_admins = Utils::getAdminNumbers();     $array_admins_names = Utils::getAdminNames();       $smstext_final = "";     $smstext = $smstext_admin;     $smstext = str_replace("\$","",$smstext);     $smstext = str_replace("{","{\$",$smstext);     $smstext2 = "\$smstext_final = \"".$smstext."\";";     @eval($smstext2);     $unicode = Utils::getHooksUnicode('default', 'admin' );     $smstext_final = html_entity_decode($smstext_final, ENT_QUOTES, 'UTF-8');     $ems_pocet = Utils::CountSms($smstext_final, $unicode);       while(list($key, $value) = @each($admins))       {       $poll77 = null; $u_sender="";       $poll77 = Utils::getGate($array_admins[$value], "admin");            if(count($poll77)>0):         $add123 = "&isms=".$poll77["isms"]."&sender=".$poll77["senderID"];         $u_sender = $poll77["senderID"];        endif;       $data = "action=sendsms&username=".$this->user5."&password=".$this->passwd5."&unicode=".$unicode."&data=".$smstext_final."&number=".$array_admins[$value].$add123;        $obj = null;        $obj = new Utils();                if($this->simulate5==1):         $this->connserver = 29; $obj->server_data = "";        else:         $this->connserver = $obj->server_post($data);        endif;            if($this->connserver==1):              $server_data =  $obj->server_data;         if(preg_match("/<b>(.*)<\/b><u>(.*)<\/u>/i", $server_data, $regs21)):            $kod = $regs21[1];           $info = $regs21[2];          endif;         $smstext_final = addslashes($smstext_final);         if($kod==1 || $kod==11):           $polll = null;            $polll = explode("__",$info);           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','1','".$polll[1]."','".$polll[2]."','".$u_sender."','".$unicode."','1','".$polll[0]."','','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);                  elseif($kod==3 && $info==9):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_wrongnr;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','".$polll[1]."','".$polll[2]."','".$u_sender."','".$unicode."','1','".$polll[0]."','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);                    elseif($kod==3 && $info==15):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_unauthorized;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','1','','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           elseif($kod==3 && $info==10):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_lowcredit;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','1','','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           elseif($kod==3 && $info==22):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_nounicode;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','1','','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);                 elseif($kod==3):           $polll = null;            $polll = explode("__",$info);           $pozn = $info;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','1','','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           elseif($kod==4):           $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_loginerror;           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','1','','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);           endif;          elseif($this->connserver==2):            $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_notconnected;           $smstext_final = addslashes($smstext_final);           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','1','','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);          elseif($this->connserver==29):            $polll = null;            $polll = explode("__",$info);           $pozn = v_smsprestashop_simulation;            $smstext_final = addslashes($smstext_final);           $dotazz5 = "insert into "._DB_PREFIX_."sp_sms_history values (null,'+".$array_admins[$value]."',NOW(),'".$smstext_final."','2','','','".$u_sender."','".$unicode."','1','','".$pozn."','".$ems_pocet."','".$value."',0,'".$array_admins_names[$value]."','".$hooks_info."' ) ";           $result = Db::getInstance()->Execute($dotazz5);          endif;      }           endif;            return true;       }                            public function uninstall()                  {              if (parent::uninstall() == false)                 return false;          $utils2 = new Utils();    $utils2->loadSmsProfile();    $this->user5 =  $utils2->user5;    $this->passwd5 =  $utils2->passwd5;    $this->simulate5 =  $utils2->simulate5;    $this->deletedb5 =  $utils2->deletedb5;      if($this->deletedb5==1):     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_settings");     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_smsuser");     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_admins");     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_hooks");     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_hooks_admins");     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_hooks_customers");     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_variables");        Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_hooks_templates");     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_hooks_unicode");     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_countries");     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_maps");     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_ownnumbersenderIDs");     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_routes");     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_sms_history");     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_textsenderIDs");     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_answers");     Db::getInstance()->Execute("DROP TABLE "._DB_PREFIX_."sp_outofstock");    endif;               $this->uninstallModuleTab('Empty');           $this->uninstallModuleTab('AdminSmsProfile');           $this->uninstallModuleTab('AdminSms');           $this->uninstallModuleTab('CustomerSms');           $this->uninstallModuleTab('SmsCharging');           $this->uninstallModuleTab('SmsWizard');           $this->uninstallModuleTab('SmsHistory');             $this->uninstallModuleTab('PayPal123');           $this->uninstallModuleTab('SmsMarketing');    $this->uninstallModuleTab('SmsAnswers');    $this->uninstallModuleTab('SendSms');    $this->uninstallModuleTab('About');                    return true;                  }            private function installModuleTab($tabClass, $tabName, $idTabParent)    {    @copy(_PS_MODULE_DIR_.$this->name.'/logo.gif', _PS_IMG_DIR_.'t/'.$tabClass.'.gif');    $tab = new Tab();    $tab->name = $tabName;    $tab->class_name = $tabClass;    $tab->module = $this->name;    $tab->id_parent = $idTabParent;    if(!$tab->save())    return false;    return true;    }         private function uninstallModuleTab($tabClass)    {    $idTab = Tab::getIdFromClassName($tabClass);    if($idTab != 0)    {    $tab = new Tab($idTab);    $tab->delete();    return true;    }    return false;    }                                               }  ?>